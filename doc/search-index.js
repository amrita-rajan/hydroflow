var searchIndex = JSON.parse('{\
"hydro_cli":{"doc":"","t":[3,4,13,11,11,11,11,11,11,11,11,11,12,11,0,5,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,12,4,4,2,8,2,8,8,2,8,3,3,13,13,10,10,10,11,11,11,11,11,11,11,11,10,11,11,10,10,10,0,10,11,11,11,11,11,10,0,11,11,11,11,10,0,10,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,3,12,11,11,11,11,11,12,11,11,12,11,11,11,11,12,11,12,12,11,12,12,11,12,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11],"n":["Cli","Commands","Deploy","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","core","deploy","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","main","python_interface","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","config","ConnectionPipe","ConnectionType","Deployment","Host","HydroflowCrate","LaunchedBinary","LaunchedHost","LocalhostHost","Service","TerraformBatch","TerraformResult","UnixSocket","UnixSocket","allocate_pipe","as_any","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_connect_to","clone","clone_into","collect_resources","collect_resources","deploy","deployment","exit_code","fmt","from","from","from","from","host","hydroflow_crate","into","into","into","into","launch_binary","localhost","provision","provision","ready","start","stderr","stdin","stdout","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Deployment","add_host","add_service","borrow","borrow_mut","clone","clone_into","deploy","fmt","from","hosts","into","services","to_owned","try_from","try_into","type_id","HydroflowCrate","allocated_incoming","as_any","as_any_mut","borrow","borrow_mut","build","built_binary","collect_resources","deploy","example","exit_code","fmt","from","host","incoming_ports","into","launched_binary","launched_host","new","on","outgoing_ports","ready","src","start","stderr","stdout","try_from","try_into","type_id","LaunchedLocalhost","LaunchedLocalhostBinary","LocalhostHost","allocate_pipe","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can_connect_to","child","collect_resources","exit_code","fmt","from","from","from","id","into","into","into","launch_binary","provision","stderr","stderr_channel","stdin","stdin_channel","stdout","stdout_channel","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","PyDeployment","PyHost","PyHydroflowCrate","PyLocalhostHost","PyReceiver","PyService","arguments","arguments","arguments","arguments","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create_connection","deploy","exit_code","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","from","from","from","from","from","from","hydro_cli_rust","into","into","into","into","into","into","into_py","into_py","into_py","into_py","items_iter","items_iter","items_iter","items_iter","items_iter","items_iter","new","new","new","next","receiver","start","stderr","stdout","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_object_raw","type_object_raw","type_object_raw","type_object_raw","type_object_raw","type_object_raw","underlying","underlying","underlying","wrap","wrap","wrap","wrap"],"q":["hydro_cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydro_cli::Commands","hydro_cli::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydro_cli::core::deployment","","","","","","","","","","","","","","","","","hydro_cli::core::hydroflow_crate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydro_cli::core::localhost","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydro_cli::python_interface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","deploys","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Collect the set of resources that this host needs to run.","Collect the set of resources that this service needs to …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,8,5,5,8,8,5,8,5,8,5,5,5,0,0,5,8,5,8,5,8,5,8,5,8,5,8,0,0,5,8,5,8,5,8,5,8,5,8,54,0,0,0,0,0,0,0,0,0,0,0,23,24,16,33,33,25,26,23,24,25,26,23,24,16,24,24,16,33,33,0,55,24,25,26,23,24,33,0,25,26,23,24,56,0,16,25,33,33,55,55,55,24,25,26,23,24,25,26,23,24,25,26,23,24,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,36,37,38,36,37,38,36,36,37,36,37,36,37,38,36,36,37,38,36,38,36,37,37,37,37,37,37,37,38,36,37,38,36,37,38,36,0,0,0,0,0,0,43,47,42,49,43,47,48,42,49,44,43,47,48,42,49,44,0,43,44,43,43,47,47,48,48,42,42,49,49,44,44,43,47,48,42,49,44,0,43,47,48,42,49,44,43,47,42,49,43,47,48,42,49,44,43,48,44,49,49,42,44,44,43,47,48,42,49,44,43,47,48,42,49,44,43,47,48,42,49,44,43,47,48,42,49,44,43,47,42,43,47,42,49],"f":[0,0,0,[1,1],[1,1],[1,1],[1,1],[[]],[[]],[[]],[[]],[[],1],0,[[],1],0,[2,[[4,[3]]]],[[5,6],7],[[8,6],7],[[]],[[]],[9,[[4,[5,10]]]],[9,[[4,[8,10]]]],[9,[[4,[5,10]]]],[9,[[4,[8,10]]]],[[],[[12,[11]]]],[13,14],[[]],[[]],[[]],0,[[],4],[[],4],[[],4],[[],4],[[],15],[[],15],[[5,9],[[4,[10]]]],[[8,9],[[4,[10]]]],[[5,9],[[4,[10]]]],[[8,9],[[4,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[18,[[17,[16]]]]],[[21,[[20,[19]]]]]],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,14],[24,24],[[]],[25,[[21,[[20,[19]]]]]],[25,[[21,[[20,[19]]]]]],[26,[[21,[[20,[19]]]]]],0,[[],[[12,[27]]]],[[24,6],7],[[]],[[]],[[]],[[]],[[],[[18,[[17,[16]]]]]],0,[[]],[[]],[[]],[[]],[28,[[21,[[20,[19]]]]]],0,[26,[[21,[[20,[19]]]]]],[25,26],[[],[[21,[[20,[19]]]]]],[[],[[21,[[20,[19]]]]]],[[],[[29,[28]]]],[[],[[30,[28]]]],[[],[[29,[28]]]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],15],[[],15],[[],15],[[],15],0,[[31,32],[[18,[[17,[16]]]]]],[[31,33],[[18,[[17,[33]]]]]],[[]],[[]],[31,31],[[]],[31],[[31,6],7],[[]],0,[[]],0,[[]],[[],4],[[],4],[[],15],0,0,[34,22],[34,22],[[]],[[]],[34,[[35,[28]]]],0,[[34,25],[[21,[[20,[19]]]]]],[[34,26],[[21,[[20,[19]]]]]],0,[34,[[12,[27]]]],[[34,6],7],[[]],[34,[[18,[[17,[16]]]]]],0,[[]],0,0,[[2,[18,[[17,[16]]]],[12,[28]]],34],0,0,[34,[[21,[[20,[19]]]]]],0,[34,[[21,[[20,[19]]]]]],[34,[[29,[28]]]],[34,[[29,[28]]]],[[],4],[[],4],[[],15],0,0,0,[[36,[18,[[17,[16]]]]],[[21,[[20,[19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,23],14],0,[[36,25],[[21,[[20,[19]]]]]],[37,[[12,[27]]]],[[36,6],7],[[]],[[]],[[]],0,[[]],[[]],[[]],[[38,28],[[21,[[20,[19]]]]]],[[36,26],[[21,[[20,[19]]]]]],[37,[[29,[28]]]],0,[37,[[30,[28]]]],0,[37,[[29,[28]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],15],[[],15],[[],15],0,0,0,0,0,0,[39,[[41,[40]]]],[39,[[41,[40]]]],[39,[[41,[40]]]],[39,[[41,[40]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[42,28,42,28]],[[43,39],40],[[[45,[44]]],[[46,[[12,[27]]]]]],[40,[[46,[43]]]],[40,[[46,[43]]]],[40,[[46,[47]]]],[40,[[46,[47]]]],[40,[[46,[48]]]],[40,[[46,[48]]]],[40,[[46,[42]]]],[40,[[46,[42]]]],[40,[[46,[49]]]],[40,[[46,[49]]]],[40,[[46,[44]]]],[40,[[46,[44]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[39,50],46],[[]],[[]],[[]],[[]],[[]],[[]],[[43,39],51],[[47,39],51],[[42,39],51],[[49,39],51],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],43],[43],[[43,28,47,[12,[28]]]],[[49,39],40],0,[[42,39],40],[[[45,[44]]],[[46,[49]]]],[[[45,[44]]],[[46,[49]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[39,53],[39,53],[39,53],[39,53],[39,53],[39,53],0,0,0,[39,[[4,[[41,[40]],3]]]],[39,[[4,[[41,[40]],3]]]],[39,[[4,[[41,[40]],3]]]],[39,[[4,[[41,[40]],3]]]]],"p":[[3,"Command"],[3,"PathBuf"],[3,"PyErr"],[4,"Result"],[3,"Cli"],[3,"Formatter"],[6,"Result"],[4,"Commands"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[3,"TypeId"],[8,"Host"],[3,"RwLock"],[3,"Arc"],[8,"Future"],[3,"Box"],[3,"Pin"],[8,"Any"],[4,"ConnectionType"],[4,"ConnectionPipe"],[3,"TerraformBatch"],[3,"TerraformResult"],[15,"i32"],[3,"String"],[3,"Receiver"],[3,"Sender"],[3,"Deployment"],[8,"Fn"],[8,"Service"],[3,"HydroflowCrate"],[3,"JoinHandle"],[3,"LocalhostHost"],[3,"LaunchedLocalhostBinary"],[3,"LaunchedLocalhost"],[3,"Python"],[3,"PyAny"],[3,"Py"],[3,"PyService"],[3,"PyDeployment"],[3,"PyHydroflowCrate"],[3,"PyRef"],[6,"PyResult"],[3,"PyHost"],[3,"PyLocalhostHost"],[3,"PyReceiver"],[3,"PyModule"],[6,"PyObject"],[3,"PyClassItemsIter"],[3,"PyTypeObject"],[13,"Deploy"],[8,"LaunchedBinary"],[8,"LaunchedHost"]]},\
"hydroflow":{"doc":"","t":[14,14,2,0,2,14,14,0,0,2,14,14,14,14,0,2,2,2,2,2,2,0,14,14,14,2,0,0,3,3,3,3,3,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,0,0,0,0,0,8,3,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,16,3,16,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,8,8,16,8,16,8,8,16,8,0,10,10,10,0,10,10,0,10,0,0,0,0,10,3,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,4,16,16,4,4,3,4,4,8,8,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,16,3,16,3,3,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,16,16,8,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,0,11,11,11,0,0,0,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,10,10,10,10,10,8,8,8,16,3,8,3,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,0,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,16,8,8,8,16,10,10,10,3,8,3,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,6,8,3,3,4,6,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["assert_var_impl","assert_var_impl","bytes","compiled","futures","hydroflow_parser","hydroflow_syntax","lang","props","pusherator","rassert","rassert","rassert_eq","rassert_eq","scheduled","serde","serde_json","static_assertions","tokio","tokio_stream","tokio_util","util","var_args","var_expr","var_type","variadics","pull","push_handoff","BatchJoin","BatchJoinState","CrossJoin","CrossJoinState","HalfJoinState","JoinState","JoinStateMut","SymmetricHashJoin","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","new","new","new","new_from_mut","next","next","next","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","PushHandoff","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","clear","collections","lattice","monotonic_map","tag","Clear","ClearDefault","borrow","borrow_mut","clear","clear","clone","clone_into","cmp","default","eq","equivalent","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","Array","Collection","Entries","Iter","Keys","MaskedArray","Single","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","entries","entries","entries","entries","entries","entries","entries","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","get","get","get","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","hash","hash","hash","hash","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","keys","keys","keys","keys","keys","keys","keys","len","len","len","len","len","len","len","mask","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vals","Compare","Convert","Debottom","DebottomLr","Lattice","Lattice","LatticeRepr","Merge","Repr","Top","bottom","compare","convert","debottom","dom_pair","is_bottom","is_top","map_union","merge","ord","pair","set_union","top","top","BottomRepr","borrow","borrow_mut","debottom","from","into","is_bottom","try_from","try_into","type_id","DomPair","DomPairRepr","borrow","borrow","borrow_mut","borrow_mut","compare","convert","debottom","from","from","into","into","is_bottom","is_top","merge","top","try_from","try_from","try_into","try_into","type_id","type_id","MapTag","MapUnion","MapUnionRepr","borrow","borrow","borrow_mut","borrow_mut","compare","convert","from","from","into","into","merge","try_from","try_from","try_into","try_into","type_id","type_id","Max","MaxRepr","Min","MinRepr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compare","compare","convert","convert","from","from","from","from","into","into","into","into","is_top","merge","merge","top","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Pair","PairRepr","borrow","borrow","borrow_mut","borrow_mut","compare","debottom","from","from","into","into","is_bottom","is_top","merge","top","try_from","try_from","try_into","try_into","type_id","type_id","SetTag","SetUnion","SetUnionRepr","borrow","borrow","borrow_mut","borrow_mut","compare","convert","debottom","from","from","into","into","is_bottom","merge","try_from","try_from","try_into","try_into","type_id","type_id","TopRepr","borrow","borrow_mut","from","into","is_top","top","try_from","try_into","type_id","MonotonicMap","borrow","borrow_mut","clone","clone_into","default","fmt","from","get_mut","into","new_init","to_owned","try_from","try_insert_with","try_into","type_id","ARRAY","BTREE_MAP","BTREE_SET","Bind","Bind","HASH_MAP","HASH_SET","MASKED_ARRAY","OPTION","SINGLE","Tag1","Tag2","VEC","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Consecutive","Duplicates","Duplicates","Monotonic","Monotonicity","NoDuplicates","NonMonotonic","PropDuplicates","PropMonotonicity","Props","Spec","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wrap","Props","Props","PullSpec","PushSpec","HandoffId","StateId","SubgraphId","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","graph","graph_ext","handoff","hash","hash","hash","input","into","into","into","net","port","query","reactor","serialize","serialize","state","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","util","Context","abort_tasks","add_state","borrow","borrow_mut","current_stratum","current_subgraph","current_tick","from","into","join_tasks","remove_state","schedule_subgraph","spawn_task","state_mut","state_ref","try_from","try_into","type_id","waker","HandoffData","Hydroflow","abort_tasks","add_channel_input","add_input","add_input_from_stream","add_read_tcp_stream","add_state","add_subgraph","add_subgraph_2in_2out","add_subgraph_2in_out","add_subgraph_2sink","add_subgraph_in_2out","add_subgraph_in_out","add_subgraph_n_m","add_subgraph_sink","add_subgraph_source","add_subgraph_stratified","add_subgraph_stratified_n_m","add_tcp_stream","add_write_tcp_stream","borrow","borrow","borrow_mut","borrow_mut","context_mut","current_stratum","current_tick","default","drop","fmt","from","from","inbound_tcp_vertex","inbound_tcp_vertex_port","into","into","join_tasks","make_edge","new","new","new_with_graph","next_stratum","outbound_tcp_vertex","reactor","recv_events","recv_events_async","run","run_async","run_available","run_stratum","run_tick","serde_graph","spawn_task","try_from","try_from","try_into","try_into","try_recv_events","type_id","type_id","GraphExt","add_channel_input","add_input","add_input_from_stream","add_subgraph_2in_2out","add_subgraph_2in_out","add_subgraph_2sink","add_subgraph_in_2out","add_subgraph_in_out","add_subgraph_sink","add_subgraph_source","CanReceive","Handoff","HandoffMeta","Inner","TeeingHandoff","TryCanReceive","VecHandoff","any_ref","any_ref","any_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","from","from","give","give","give","give","give","give","handoff_list","into","into","is_bottom","is_bottom","is_bottom","take_inner","take_inner","take_inner","tee","to_owned","try_from","try_from","try_give","try_give","try_into","try_into","type_id","type_id","Ctx","HandoffList","PortList","PortListSplit","Suffix","make_ctx","set_graph_meta","split_ctx","Buffer","Give","Input","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","flush","from","from","give","give","give","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Message","address","batch","borrow","borrow_mut","clone","clone_into","decode","eq","equivalent","fmt","from","into","network_vertex","to_owned","try_from","try_into","type_id","Address","Polarity","Port","PortCtx","RECV","RecvCtx","RecvPort","SEND","SendCtx","SendPort","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","give","give","into","into","into","into","ref_cast","ref_cast_mut","take_inner","take_inner","try_from","try_from","try_from","try_from","try_give","try_give","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Operator","Query","borrow","borrow","borrow_mut","borrow_mut","concat","concat","default","filter","from","from","into","into","map","new","run_available","sink","source","tee","try_from","try_from","try_into","try_into","type_id","type_id","Reactor","borrow","borrow_mut","clone","clone_into","from","into","into_waker","new","to_owned","trigger","try_from","try_into","type_id","StateHandle","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","Once","SendOnce","borrow","borrow","borrow_mut","borrow_mut","from","from","get","into","into","once","send","try_from","try_from","try_into","try_into","type_id","type_id","UdpBytesSink","UdpBytesStream","UdpFramedSink","UdpFramedStream","UdpLinesSink","UdpLinesStream","UdpSink","UdpStream","bind_udp_bytes","bind_udp_lines","collect_ready","collect_ready_async","deserialize_from_bytes","ipv4_resolve","ready_iter","serialize_to_bytes","sort_unstable_by_key_hrtb","tcp_bytes","tcp_bytestream","tcp_framed","tcp_lines","udp_bytes","udp_bytestream","udp_framed","udp_lines","unbounded_channel"],"q":["hydroflow","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::compiled","","hydroflow::compiled::pull","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::compiled::push_handoff","","","","","","","","","","hydroflow::lang","","","","","hydroflow::lang::clear","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::bottom","","","","","","","","","","hydroflow::lang::lattice::dom_pair","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::map_union","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::ord","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::pair","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::set_union","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::top","","","","","","","","","","hydroflow::lang::monotonic_map","","","","","","","","","","","","","","","","hydroflow::lang::tag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::props","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::props::wrap","","","","hydroflow::scheduled","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::context","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::graph_ext","","","","","","","","","","","hydroflow::scheduled::handoff","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::handoff::handoff_list","","","","","","","","hydroflow::scheduled::input","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::net","","","","","","","","","","","","","","","","","","hydroflow::scheduled::net::network_vertex","hydroflow::scheduled::port","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::query","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::reactor","","","","","","","","","","","","","","hydroflow::scheduled::state","","","","","","","","","","","","hydroflow::scheduled::util","","","","","","","","","","","","","","","","","","","hydroflow::util","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Asserts that the variable’s type implements the given …","Asserts that the variable’s type implements the given …","","","","","","","","","","","","","","","","","","","","Helper utilities for the Hydroflow surface syntax.","Macro for pattern-matching with variadic tuples. This is …","Macro creating a variadic tuple value from a list of …","Macro creating a variadic tuple type from a list of types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","A trait for abstracting over the <code>.clear()</code> method available …","","","","Clears the collection without neccesarily freeing …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merge DELTA into THIS. Return TRUE if THIS changed, FALSE …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","A map-like interface which in reality only stores one …","","","","","","","Returns the argument unchanged.","Returns the value for the monotonically increasing key, or …","Calls <code>U::from(self)</code>.","Creates a new <code>MonotonicMap</code> initialized with the given …","","","Inserts the value using the function if new <code>key</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","A handoff’s ID. Invalid if used in a different …","A staten handle’s ID. Invalid if used in a different …","A subgraph’s ID. Invalid if used in a different …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This module contiains networking code.","Organizational module for Hydroflow Send/RecvCtx structs …","","","","","","","","","","","","","","","","","","","","","The main state of the Hydroflow instance, which is …","","Adds state to the context and returns the handle.","","","Gets the current stratum nubmer.","Gets the ID of the current subgraph.","Gets the current tick (local time) count.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Removes state from the context returns it as an owned heap …","Schedules a subgraph.","","Returns an exclusive reference to the state.","Returns a shared reference to the state.","","","","Returns a <code>Waker</code> for interacting with async Rust.","A handoff and its input and output SubgraphIds.","A Hydroflow graph. Owns, schedules, and runs the compiled …","","","","","","","","","","","","","Adds a new compiled subgraph with a variable number of …","","","Adds a new compiled subgraph with the specified inputs and …","Adds a new compiled subgraph with a variable number of …","","","","","","","Gets a exclusive (mut) ref to the internal context, …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a handoff edge and returns the corresponding send …","Create a new empty Hydroflow graph.","","Create a new empty Hydroflow graph with the given …","Go to the next stratum which has work available, possibly …","","Returns a reactor for externally scheduling subgraphs, …","Enqueues subgraphs triggered by external events, blocking …","Enqueues subgraphs triggered by external events …","Runs the dataflow graph forever.","Runs the dataflow graph forever.","Runs the dataflow until no more work is immediately …","Runs the current stratum of the dataflow until no more …","Runs the dataflow until the next tick begins. Returns true …","","","","","","","Enqueues subgraphs triggered by external events without …","","","Convenience extension methods for the Hydroflow struct.","","Adds an “input” operator, returning a handle to insert …","","","","","","","","","","","A handle onto the metadata part of a Handoff, with no …","","","","A VecDeque-based FIFO handoff.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","A variadic list of Handoff types, represented using a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","An empty trait used to denote <code>Polarity</code>: either <strong>send</strong> or …","","","An uninstantiable type used to tag port <code>Polarity</code> as <strong>receive</strong>…","","","An uninstantiable type used to tag port <code>Polarity</code> as <strong>send</strong>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A handle into a specific super::graph::Hydroflow instance …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The receiving half of a once channel.","The sending half of a once channel.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a once channel where the SendOnce end can set a …","","","","","","","","","","","","","","","","","","Collects the immediately available items from the <code>Stream</code> …","Collects the immediately available items from the <code>Stream</code> …","","","","","","Helper creates a TCP <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …","Helper creates a TCP <code>Stream</code> and <code>Sink</code> for undelimited …","Helper creates a TCP <code>Stream</code> and <code>Sink</code> from the given …","Helper creates a TCP <code>Stream</code> and <code>Sink</code> for <code>str</code>ings delimited …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> for undelimited …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> from the given …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> for <code>str</code>ings delimited …",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,8,10,2,3,7,1,8,10,2,3,1,2,3,2,3,7,1,8,10,2,3,7,1,8,10,2,3,7,8,10,7,8,10,10,7,8,10,7,1,8,10,2,3,7,1,8,10,2,3,7,1,8,10,2,3,0,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,16,16,84,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,85,0,85,0,0,20,21,22,23,20,21,22,23,20,21,22,23,20,21,22,23,20,21,85,20,20,22,22,23,23,20,21,22,23,20,21,22,23,20,21,20,21,22,23,85,20,20,22,22,23,23,85,20,20,22,22,23,23,20,21,22,23,20,21,22,23,20,21,22,23,85,85,20,20,22,22,23,23,85,20,20,22,22,23,23,23,20,21,20,21,22,23,20,21,22,23,20,21,22,23,20,21,22,23,23,0,0,0,86,0,87,0,0,87,0,0,88,89,86,0,86,90,0,91,0,0,0,0,90,0,92,92,92,92,92,92,92,92,92,0,0,93,94,93,94,94,94,94,93,94,93,94,94,94,94,94,93,94,93,94,93,94,0,0,0,95,96,95,96,96,96,95,96,95,96,96,95,96,95,96,95,96,0,0,0,0,97,98,99,100,97,98,99,100,98,100,98,100,97,98,99,100,97,98,99,100,98,98,100,98,97,98,99,100,97,98,99,100,97,98,99,100,0,0,101,102,101,102,102,102,101,102,101,102,102,102,102,102,101,102,101,102,101,102,0,0,0,103,104,103,104,104,104,104,103,104,103,104,104,104,103,104,103,104,103,104,0,105,105,105,105,105,105,105,105,105,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,106,107,0,0,0,0,0,0,0,0,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,0,0,117,0,117,0,0,0,0,0,0,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,0,123,124,0,0,0,0,0,32,33,34,32,33,34,32,33,34,32,33,34,0,32,33,34,32,33,34,32,32,33,33,34,32,33,34,0,0,0,32,33,34,0,32,33,34,0,0,0,0,32,33,0,32,33,34,32,33,32,33,34,32,33,34,32,33,34,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,51,41,51,41,41,41,41,41,51,41,51,41,41,41,51,41,41,41,51,41,41,41,41,41,41,41,41,41,41,41,41,41,41,51,41,51,41,41,51,0,125,125,125,125,125,125,125,125,125,125,0,0,0,66,0,0,0,57,48,63,48,63,48,63,63,63,48,63,48,63,126,48,48,48,66,63,0,48,63,57,48,63,66,48,63,63,63,48,63,127,66,48,63,48,63,128,0,0,0,129,128,128,129,0,0,0,45,44,45,44,45,45,45,44,45,44,130,45,44,45,44,44,45,45,44,45,44,45,44,0,47,47,47,47,47,47,47,47,47,47,47,47,0,47,47,47,47,0,0,0,0,0,0,0,0,0,0,67,71,131,68,67,71,131,68,67,71,131,68,15,68,67,71,131,68,68,68,70,68,67,71,131,68,15,68,67,71,131,68,67,71,131,68,0,0,72,73,72,73,72,73,73,72,72,73,72,73,72,73,73,72,73,72,72,73,72,73,72,73,0,58,58,58,58,58,58,58,58,58,58,58,58,58,0,37,37,37,37,37,37,37,37,37,37,37,0,0,78,76,78,76,78,76,76,78,76,0,78,78,76,78,76,78,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[2,4],5],[[[3,[6,6,6]],4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,7],[1,8],[9,10],[[3,3],10],[7,11],[8,11],[10,11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[]],[[]],[[]],[14],[[]],[15,14],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,[[]],[[]],[[]],[16],[16,16],[[]],[[16,16],17],[[],16],[[16,16],18],[[],18],[[16,4],5],[[]],[16],[[]],[[16,16],[[11,[17]]]],[[]],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[20,[19]]],[[20,[19]]]],[21,21],[[[22,[19]]],[[22,[19]]]],[[[23,[19]]],[[23,[19]]]],[[]],[[]],[[]],[[]],[[[20,[24]],20],17],[[21,21],17],[[]],[20],[[[20,[25]]]],[[[22,[25]]]],[22],[23],[[[23,[25]]]],[[[20,[26]],20],18],[[21,21],18],[[[22,[26]],22],18],[[[23,[26]],23],18],[[],18],[[],18],[[],18],[[],18],[[[20,[6]],4],5],[[21,4],5],[[]],[[]],[[]],[[]],[[],11],[20,11],[[[20,[25]]],11],[22,11],[[[22,[25]]],11],[23,11],[[[23,[25]]],11],[[],11],[20,11],[[[20,[25]]],11],[22,11],[[[22,[25]]],11],[23,11],[[[23,[25]]],11],[[[20,[27]]]],[21],[[[22,[27]]]],[[[23,[27]]]],[[]],[[]],[[]],[[]],[20],[21],[22],[23],[[],18],[[]],[[[20,[25]]]],[20],[[[22,[25]]]],[22],[[[23,[25]]]],[23],[[],28],[[[20,[25]]],28],[20,28],[22,28],[[[22,[25]]],28],[[[23,[25]]],28],[23,28],0,[[[20,[29]],20],[[11,[17]]]],[[21,21],[[11,[17]]]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,[[],[[11,[17]]]],[[]],[[],11],0,[[],18],[[],18],0,[[],18],0,0,0,0,[[]],0,[[]],[[]],[[],11],[[]],[[]],[[],18],[[],12],[[],12],[[],13],0,0,[[]],[[]],[[]],[[]],[[],[[11,[17]]]],[[]],[[],11],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,[[]],[[]],[[]],[[]],[[],[[11,[17]]]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[11,[17]]]],[[],[[11,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,[[]],[[]],[[]],[[]],[[],[[11,[17]]]],[[],11],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,[[]],[[]],[[]],[[]],[[],[[11,[17]]]],[[]],[[],11],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[[]],[[]],[[]],[[]],[[],18],[[]],[[],12],[[],12],[[],13],0,[[]],[[]],[30,30],[[]],[[],30],[[30,4],5],[[]],[30,11],[[]],[[],30],[[]],[[],12],[[30,31]],[[],12],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[33,33],[34,34],[[]],[[]],[[]],0,[[32,32],18],[[33,33],18],[[34,34],18],[[],18],[[],18],[[],18],[[32,4],5],[[32,4],5],[[33,4],5],[[33,4],5],[[34,4],5],[[]],[[]],[[]],0,0,0,[32],[33],[34],0,[[]],[[]],[[]],0,0,0,0,[32,12],[33,12],0,[[]],[[]],[[]],[[],35],[[],35],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],0,0,[36],[36,37],[[]],[[]],[36,28],[36,32],[36,28],[[]],[[]],[36],[[36,37],38],[[36,32]],[36,[[12,[39]]]],[[36,37]],[[36,37]],[[],12],[[],12],[[],13],[36,40],0,0,[41],[[41,42],[[44,[43]]]],[[41,42],[[44,[45]]]],[[41,42]],[[41,46],[[49,[[48,[47]]]]]],[41,37],[41,32],[[41,49,49,42,42],32],[[41,49,49,42],32],[[41,49,49],32],[[41,49,42,42],32],[[41,49,42],32],[[41,[50,[49]],[50,[42]]],32],[[41,49],32],[[41,42],32],[[41,28],32],[[41,28,[50,[49]],[50,[42]]],32],[[41,46]],[[41,46],[[42,[[48,[47]]]]]],[[]],[[]],[[]],[[]],[[41,32],36],[41,28],[41,28],[[],41],[41],[[51,4],[[12,[52]]]],[[]],[[]],[41],[[41,53],[[49,[48]]]],[[]],[[]],[41,54],[41],[[],41],[[[56,[55]],57],51],[55,41],[[41,18],18],[41,[[42,[48]]]],[41,58],[41,[[11,[59]]]],[41,[[11,[59]]]],[41,[[11,[60]]]],[41,[[11,[60]]]],[41,18],[41,18],[41,18],[41,[[11,[61]]]],[41,[[12,[39]]]],[[],12],[[],12],[[],12],[[],12],[41,28],[[],13],[[],13],0,[42,[[44,[43]]]],[42,[[44,[45]]]],[42],[[49,49,42,42],32],[[49,49,42],32],[[49,49],32],[[49,42,42],32],[[49,42],32],[49,32],[42,32],0,0,0,0,0,0,0,[[],62],[48,62],[63,62],[[]],[[]],[[]],[[]],[63,63],[[]],[[],48],[[],63],[[]],[[]],[[]],[[48,11],11],[[48,21],21],[[48,64],64],[[]],[[63,50],50],0,[[]],[[]],[[],18],[48,18],[63,18],[[]],[48],[63],[63,63],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,0,[[]],[[[11,[32]],[11,[32]],50]],[[]],0,0,0,[[]],[[]],[[]],[[]],[45,45],[[]],[[],45],[44],[[]],[[]],[[],18],[45,18],[44],[[]],[[]],[[58,32],44],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,[[]],[[]],[47,47],[[]],[65,47],[[47,47],18],[[],18],[[47,4],5],[[]],[[]],0,[[]],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[66]]]],[[[68,[67,66]]]],[[]],[[]],[[]],[[]],[[],[[68,[69]]]],[[],[[68,[69]]]],[[[70,[66]]]],[[[68,[71,66]]]],[[],12],[[],12],[[],12],[[],12],[[[15,[66]]],12],[[[68,[67,66]]],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,[[]],[[]],[[]],[[]],[[72,72],72],[[73,[50,[72]]],72],[[],73],[72,72],[[]],[[]],[[]],[[]],[72,72],[[],73],[73],[72],[73,72],[[[72,[19]],28],[[50,[[72,[19]]]]]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[[]],[[]],[58,58],[[]],[[]],[[]],[[58,32],40],[[[74,[32]]],58],[[]],[[58,32],[[12,[[75,[32]]]]]],[[],12],[[],12],[[],13],0,[[]],[[]],[37,37],[[]],[[[37,[6]],4],5],[[]],[[]],[[]],[[],12],[[],12],[[],13],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[76,77],[[]],[[]],[[]],[78],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,0,0,0,0,[79],[79],[[]],[[]],[80],[55,[[12,[79,81]]]],[[],82],[[],65],[[]],[46],[46],[46],[46],[83],[83],[83],[83],[[]]],"p":[[3,"CrossJoinState"],[3,"BatchJoinState"],[3,"HalfJoinState"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"BatchJoin"],[3,"CrossJoin"],[6,"JoinState"],[3,"SymmetricHashJoin"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"PushHandoff"],[6,"SendCtx"],[3,"ClearDefault"],[4,"Ordering"],[15,"bool"],[8,"Clone"],[3,"Single"],[3,"Iter"],[3,"Array"],[3,"MaskedArray"],[8,"Ord"],[8,"Eq"],[8,"PartialEq"],[8,"Hash"],[15,"usize"],[8,"PartialOrd"],[3,"MonotonicMap"],[8,"FnOnce"],[3,"SubgraphId"],[3,"HandoffId"],[3,"StateId"],[3,"String"],[3,"Context"],[3,"StateHandle"],[3,"Box"],[3,"TryCurrentError"],[3,"Waker"],[3,"Hydroflow"],[6,"SendPort"],[3,"SyncSender"],[3,"Input"],[3,"Buffer"],[3,"TcpStream"],[3,"Message"],[3,"VecHandoff"],[6,"RecvPort"],[3,"Vec"],[3,"HandoffData"],[3,"Error"],[15,"u16"],[8,"Future"],[15,"str"],[4,"Cow"],[8,"HandoffMeta"],[3,"Reactor"],[3,"NonZeroUsize"],[15,"never"],[3,"SerdeGraph"],[8,"Any"],[3,"TeeingHandoff"],[3,"VecDeque"],[3,"Bytes"],[8,"Handoff"],[4,"SEND"],[3,"PortCtx"],[8,"Polarity"],[6,"RecvCtx"],[4,"RECV"],[3,"Operator"],[3,"Query"],[3,"UnboundedSender"],[3,"SendError"],[3,"Once"],[3,"RefMut"],[3,"SendOnce"],[4,"SocketAddr"],[3,"BytesMut"],[3,"Error"],[8,"Iterator"],[3,"UdpSocket"],[8,"Clear"],[8,"Collection"],[8,"Debottom"],[8,"LatticeRepr"],[8,"Compare"],[8,"Convert"],[8,"Top"],[8,"Merge"],[3,"BottomRepr"],[3,"DomPair"],[3,"DomPairRepr"],[3,"MapUnion"],[3,"MapUnionRepr"],[3,"Max"],[3,"MaxRepr"],[3,"Min"],[3,"MinRepr"],[3,"Pair"],[3,"PairRepr"],[3,"SetUnion"],[3,"SetUnionRepr"],[3,"TopRepr"],[8,"Tag1"],[8,"Tag2"],[4,"HASH_SET"],[4,"HASH_MAP"],[4,"BTREE_SET"],[4,"BTREE_MAP"],[4,"VEC"],[4,"SINGLE"],[4,"OPTION"],[3,"ARRAY"],[3,"MASKED_ARRAY"],[8,"Props"],[3,"NonMonotonic"],[3,"Monotonic"],[3,"Consecutive"],[3,"Duplicates"],[3,"NoDuplicates"],[8,"PullSpec"],[8,"PushSpec"],[8,"GraphExt"],[8,"CanReceive"],[8,"TryCanReceive"],[8,"PortList"],[8,"PortListSplit"],[8,"Give"],[3,"Port"]]},\
"hydroflow_datalog":{"doc":"","t":[14],"n":["datalog"],"q":["hydroflow_datalog"],"d":[""],"i":[0],"f":[0],"p":[]},\
"hydroflow_datalog_core":{"doc":"","t":[5,5],"n":["gen_hydroflow_graph","hydroflow_graph_to_program"],"q":["hydroflow_datalog_core",""],"d":["",""],"i":[0,0],"f":[[1,[[3,[2]]]],[[2,4],5]],"p":[[3,"Literal"],[3,"FlatGraph"],[4,"Result"],[3,"TokenStream"],[4,"Stmt"]]},\
"hydroflow_internalmacro":{"doc":"","t":[23],"n":["operator_docgen"],"q":["hydroflow_internalmacro"],"d":[""],"i":[0],"f":[0],"p":[]},\
"hydroflow_lang":{"doc":"","tn":["diagnostic","graph","parse","pretty_span","union_find","Diagnostic","Error","Help","Level","Note","Warning","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","emit","eq","equivalent","fmt","fmt","from","from","from","hash","into","into","is_error","is_error","level","message","partial_cmp","span","spanned","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Color","Comp","Elided","GraphEdgeId","GraphNodeId","GraphSubgraphId","Handoff","Hoff","Int","Node","Operator","Path","PortIndexValue","Pull","Push","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","combine","data","data","data","default","default","default","deserialize","deserialize","deserialize","deserialize","di_mul_graph","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","flat_graph","flat_to_partitioned","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_ported","graph_algorithms","hash","hash","hash","into","into","into","into","into","into","is_specified","node_color","ops","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partitioned_graph","serde_graph","serialize","serialize","serialize","serialize","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","dst_span","src_span","DiMulGraph","assert_valid","borrow","borrow_mut","clone","clone_into","default","degree_in","degree_out","edge","edges","fmt","from","insert_edge","insert_intermediate_node","into","new","predecessor_edges","predecessor_nodes","predecessors","successor_edges","successor_nodes","successors","to_owned","try_from","try_into","type_id","with_capacity","FlatGraph","add_statement","borrow","borrow_mut","default","emit_diagnostics","fmt","from","from_hfcode","into","into_partitioned_graph","mermaid_string","surface_syntax_string","try_from","try_into","type_id","write_mermaid","write_surface_syntax","scc_kosaraju","topo_sort","DelayType","Fixed","IDENTITY_WRITE_FN","OPERATORS","OperatorConstraints","OperatorWriteOutput","Persistence","PortListSpec","RANGE_0","RANGE_1","RANGE_ANY","RangeTrait","Static","Stratum","Tick","Tick","Variadic","WriteContextArgs","WriteFn","WriteIteratorArgs","arguments","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","contains","context","default","end_bound","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","generic_args","hard_range_inn","hard_range_out","human_string","ident","identity_write_iterator_fn","input_delaytype_fn","input_ports","inputs","into","into","into","into","into","into","into","is_external_input","is_pull","make_ident","name","node_id","num_args","op_name","op_span","output_ports","outputs","partial_cmp","partial_cmp","persistence_args","persistence_args","ports_inn","ports_out","root","soft_range_inn","soft_range_out","start_bound","subgraph_id","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_args","type_args","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_fn","write_iterator","write_iterator_after","write_prologue","PartitionedGraph","as_code","borrow","borrow_mut","default","from","from_flat_graph","into","new","node_id_as_ident","node_id_as_string","node_to_txt","serde_string","to_serde_graph","try_from","try_from","try_into","type_id","write_serde_graph","SerdeEdge","SerdeGraph","barrier_handoffs","blocking","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deserialize","deserialize","dst","edges","from","from","into","into","label","new","node_color_map","nodes","serialize","serialize","src","subgraph_internal_handoffs","subgraph_nodes","subgraph_stratum","to_dot","to_mermaid","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","varname_nodes","write_dot","write_mermaid","HfCode","HfStatement","IndexInt","Indexing","Int","Link","Name","Named","NamedHfStatement","Operator","Operator","Paren","Path","Pipeline","Pipeline","PipelineLink","PipelineParen","PortIndex","Ported","args","args","arrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bracket_token","clone","clone","clone_into","clone_into","cmp","eq","equals","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","hash","index","inn","inner","into","into","into","into","into","into","into","into","into","into","into","lhs","name","name","name_string","out","paren_token","paren_token","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","partial_cmp","path","pipeline","pipeline","rhs","span","span","span","span","span","span","span","span","span","span","span","span","statements","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_arguments","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","PrettyRowCol","PrettySpan","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","UnionFind","borrow","borrow_mut","clone","clone_into","default","find","from","into","new","same_set","to_owned","try_from","try_into","type_id","union","with_capacity"],"q":["hydroflow_lang","","","","","hydroflow_lang::diagnostic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::graph::Node","","hydroflow_lang::graph::di_mul_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::graph::flat_graph","","","","","","","","","","","","","","","","","","hydroflow_lang::graph::graph_algorithms","","hydroflow_lang::graph::ops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::graph::partitioned_graph","","","","","","","","","","","","","","","","","","","hydroflow_lang::graph::serde_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::pretty_span","","","","","","","","","","","","","","","","","","","","hydroflow_lang::union_find","","","","","","","","","","","","","","","",""],"d":["","Graph representation stages for Hydroflow graphs.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Computation (yellow)","","ID to identify an edge.","ID to identify a node (operator or handoff) in both …","ID to identify a subgraph in …","","Handoff (red) – not a color for operators, inserted …","","","","","Helper struct for <code>PortIndex</code> which keeps span information …","Pull (green)","Push (blue)","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>Err(self)</code> if there is a conflict.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A directed multigraph where an vertex’s inbound and …","Assert that <code>self</code> is in a consistent state, for debugging. …","","","","","","","","","","","Returns the argument unchanged.","","For an edge E from A -&gt; B, insert a new node NODE along …","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A graph representing a hydroflow dataflow graph before …","Add a single <code>HfStatement</code> line to this <code>FlatGraph</code>.","","","","Emits diagnostics, returns true if there are errors.","","Returns the argument unchanged.","Creates a new <code>FlatGraph</code> instance based on the <code>HfCode</code> AST.","Calls <code>U::from(self)</code>.","Run subgraph partitioning and stratification and convert …","Convert into a mermaid graph.","Convert back into surface syntax.","","","","Convert into a mermaid graph.","Convert back into surface syntax.","","","","","","","","","","","","","","","","","","","","","","","Arguments provided by the user into the operator as …","","","","","","","","","","","","","","","","","","","","","","<code>context</code> ident, the name of the provided …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Operator generic (type or lifetime) arguments.","Input argument range required to not show an error.","Output argument range required to not show an error.","","Ident the iterator or pullerator should be assigned to.","","Determines if this input must be preceeded by a stratum …","Port values used as this operator’s input.","Input operator idents (used for pull).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If this operator receives external inputs and therefore …","If a pull iterator (true) or pusherator (false) should be …","","Operator’s name.","Node ID identifying this operator in the flat or …","Number of arguments i.e. <code>operator(a, b, c)</code> has <code>num_args = 3</code>…","Name of the operator (will match <code>OperatorConstraints::name</code>…","The source span of this operator.","Port values used as this operator’s output.","Output operator idents (used for push).","","","How many persistence lifetime arguments can be provided.","Lifetime persistence arguments. Corresponds to a prefix of …","What named or numbered input ports to expect?","What named or numbered output ports to expect?","<code>hydroflow</code> crate name for <code>use #root::something</code>.","Input argument range required to not show a warning.","Output argument range required to not show an warning.","","Subgraph ID in which this operator is contained.","","","","","","","","","","","","","","","","","How many generic type arguments can be provided.","Type persistence arguments. Corersponds to a (suffix) of …","","","","","","","","Emit code in multiple locations. See <code>OperatorWriteOutput</code>.","Iterator (or pusherator) code inside the subgraphs. The …","Code which runs after iterators have been run. Mainly for …","Code which runs once outside the subgraph to set up any …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","What variable name each graph node belongs to (if any). …","","","","","","","","","","","","","","","","","","","","Port can either be an int or a name (path).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper struct which displays the span as <code>row:col</code> for human …","Helper struct which displays the span as <code>path:row:col</code> for …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,0,1,1,1,2,1,2,1,2,1,2,1,2,1,1,1,2,1,2,2,1,1,2,1,2,2,2,1,2,2,1,2,1,2,1,2,1,2,0,17,18,0,0,0,20,17,18,0,20,18,0,17,17,20,14,15,16,17,18,20,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,18,14,15,16,14,15,16,14,15,16,17,0,14,15,16,17,18,14,15,16,17,18,0,0,20,14,15,16,17,18,20,14,14,15,15,16,16,17,18,18,18,0,14,15,16,20,14,15,16,17,18,18,0,0,14,15,16,17,18,0,0,14,15,16,17,20,18,14,15,16,17,18,20,14,15,16,17,18,20,14,15,16,17,18,20,14,15,16,17,18,58,58,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,0,59,0,0,0,0,0,0,0,0,0,0,33,32,32,33,59,0,0,0,37,59,60,36,37,32,34,33,59,60,36,37,32,34,33,32,33,32,33,32,33,61,36,34,61,32,33,32,33,32,33,59,60,36,37,32,34,33,37,60,60,61,37,0,60,37,37,59,60,36,37,32,34,33,60,37,36,60,36,60,37,36,37,37,32,33,60,37,60,60,36,60,60,61,36,32,33,59,60,36,37,32,34,33,59,60,36,37,32,34,33,60,37,59,60,36,37,32,34,33,60,34,34,34,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,42,43,43,42,43,42,43,43,43,42,43,42,43,42,43,42,43,42,43,42,42,42,43,42,43,42,42,42,42,42,43,43,42,43,42,43,42,42,42,42,0,0,0,0,21,51,51,27,0,0,51,51,21,0,27,0,0,0,0,44,44,53,28,27,50,51,22,52,53,54,44,21,46,28,27,50,51,22,52,53,54,44,21,46,54,21,46,21,46,46,46,50,46,21,46,28,27,50,51,22,52,53,54,44,21,46,46,54,22,22,28,27,50,51,22,52,53,54,44,21,46,53,44,50,44,22,52,44,28,27,50,51,22,52,53,54,44,21,46,46,44,50,52,53,28,27,50,51,22,52,53,54,44,21,46,46,28,21,46,28,27,50,51,22,52,53,54,44,21,46,28,27,50,51,22,52,53,54,44,21,46,28,27,50,51,22,52,53,54,44,21,46,44,28,27,50,51,22,52,53,54,44,21,46,46,0,0,55,56,55,56,55,56,55,56,55,56,55,56,55,56,55,56,55,56,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[2],[[1,1],4],[[],4],[[1,5],6],[[2,5],6],[[]],[[]],[7,2],[1],[[]],[[]],[1,4],[2,4],0,0,[[1,1],[[8,[3]]]],0,[[9,1,[11,[10]]],2],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[17,17],[18,18],[[]],[[]],[[]],[[]],[[]],[[14,14],3],[[15,15],3],[[16,16],3],[[17,17],3],[[18,18],3],[[18,18],[[12,[18,18]]]],[14,19],[15,19],[16,19],[[],14],[[],15],[[],16],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],0,[[14,14],4],[[15,15],4],[[16,16],4],[[17,17],4],[[18,18],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,0,[[20,5],6],[[14,5],6],[[15,5],6],[[16,5],6],[[17,5],6],[[18,5],6],[[]],[19,14],[[]],[[]],[19,15],[[]],[19,16],[[]],[21,18],[[]],[22],0,[14],[15],[16],[[]],[[]],[[]],[[]],[[]],[[]],[18,4],[[20,23,23],[[8,[17]]]],0,[[14,14],[[8,[3]]]],[[15,15],[[8,[3]]]],[[16,16],[[8,[3]]]],[[17,17],[[8,[3]]]],[[18,18],[[8,[3]]]],0,0,[14,12],[15,12],[16,12],[17,12],[20,9],[18,9],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,[24],[[]],[[]],[24,24],[[]],[[],24],[24,23],[24,23],[24,8],[24,25],[[24,5],6],[[]],[24],[24,8],[[]],[[],24],[24,25],[24,25],[24,25],[24,25],[24,25],[24,25],[[]],[[],12],[[],12],[[],13],[23,24],0,[[26,27]],[[]],[[]],[[],26],[26,4],[[26,5],6],[[]],[28,26],[[]],[26,[[12,[29,2]]]],[26,10],[26,10],[[],12],[[],12],[[],13],[26,6],[26,6],[[],30],[[],31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[33,33],[[]],[[]],[[32,32],3],[[33,33],3],[[],4],0,[[],34],[[],35],[[32,32],4],[[33,33],4],[[],4],[[],4],[[32,5],6],[[33,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],10],0,[[36,37],38],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[36,[40,[39]]],41],0,0,0,0,0,0,0,[[32,32],[[8,[3]]]],[[33,33],[[8,[3]]]],0,0,0,0,0,0,0,[[],35],0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,[[29,38,4],38],[[]],[[]],[[],29],[[]],[26,[[12,[29,2]]]],[[]],[[],29],[[29,14,4],41],[[29,14,4],10],[[29,14],10],[29,10],[29,42],[26,[[12,[29]]]],[[],12],[[],12],[[],13],[29,6],0,0,0,0,[[]],[[]],[[]],[[]],[43,43],[[]],[[],43],[[],42],[[],[[12,[43]]]],[[],[[12,[42]]]],0,0,[[]],[[]],[[]],[[]],0,[[],42],0,0,[43,12],[42,12],0,0,0,0,[42,10],[42,10],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[42,6],[42,6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[44,45],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[21,21],[46,46],[[]],[[]],[[46,46],3],[[46,46],4],0,[[],4],[[21,5],6],[[46,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[44,47],0,[44,10],0,0,0,[48,[[49,[28]]]],[48,[[49,[27]]]],[48,[[49,[50]]]],[48,[[49,[51]]]],[48,[[49,[22]]]],[48,[[49,[52]]]],[48,[[49,[53]]]],[48,[[49,[54]]]],[48,[[49,[44]]]],[48,[[49,[21]]]],[48,[[49,[46]]]],[[46,46],[[8,[3]]]],0,0,0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[[]],[[]],[[28,38]],[[27,38]],[[50,38]],[[51,38]],[[22,38]],[[52,38]],[[53,38]],[[54,38]],[[44,38]],[[21,38]],[[46,38]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[44,[[8,[45]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,[[]],[[]],[[]],[[]],[[55,5],6],[[56,5],6],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[[]],[[]],[57,57],[[]],[[],57],[57],[[]],[[]],[[],57],[57,4],[[]],[[],12],[[],12],[[],13],[57],[23,57]],"p":[[4,"Level"],[3,"Diagnostic"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Option"],[3,"Span"],[3,"String"],[8,"Into"],[4,"Result"],[3,"TypeId"],[3,"GraphNodeId"],[3,"GraphEdgeId"],[3,"GraphSubgraphId"],[4,"Color"],[4,"PortIndexValue"],[3,"KeyData"],[4,"Node"],[4,"PortIndex"],[3,"Ported"],[15,"usize"],[3,"DiMulGraph"],[8,"Iterator"],[3,"FlatGraph"],[4,"HfStatement"],[3,"HfCode"],[3,"PartitionedGraph"],[3,"BTreeMap"],[3,"Vec"],[4,"DelayType"],[4,"Persistence"],[3,"OperatorWriteOutput"],[4,"Bound"],[3,"WriteContextArgs"],[3,"WriteIteratorArgs"],[3,"TokenStream"],[15,"str"],[8,"AsRef"],[3,"Ident"],[3,"SerdeGraph"],[3,"SerdeEdge"],[3,"Operator"],[3,"Punctuated"],[3,"IndexInt"],[3,"Path"],[6,"ParseStream"],[6,"Result"],[3,"NamedHfStatement"],[4,"Pipeline"],[3,"PipelineParen"],[3,"PipelineLink"],[3,"Indexing"],[3,"PrettySpan"],[3,"PrettyRowCol"],[3,"UnionFind"],[13,"Handoff"],[4,"PortListSpec"],[3,"OperatorConstraints"],[8,"RangeTrait"]]},\
"hydroflow_macro":{"doc":"","t":[14,14],"n":["hydroflow_parser","hydroflow_syntax"],"q":["hydroflow_macro",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"pusherator":{"doc":"Pusherator generics and argument order conventions:","t":[3,16,16,8,16,8,8,11,11,11,0,11,0,11,0,0,0,11,11,10,0,11,11,0,11,11,0,0,11,10,11,0,11,0,11,11,11,11,0,11,3,8,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["InputBuild","Item","ItemOut","IteratorToPusherator","Output","Pusherator","PusheratorBuild","borrow","borrow_mut","default","demux","demux","filter","filter","filter_map","flatten","for_each","for_each","from","give","inspect","inspect","into","map","map","new","partition","pivot","pull_to_push","push_to","push_to","switch","switch","tee","tee","try_from","try_into","type_id","unzip","unzip","Demux","PusheratorList","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","Filter","FilterBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","FilterMap","FilterMapBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Flatten","FlattenBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","ForEach","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","Inspect","InspectBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Map","MapBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Partition","PartitionBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Pivot","PivotBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","new","push_to","run","step","try_from","try_from","try_into","try_into","type_id","type_id","Switch","SwitchBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Tee","TeeBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Unzip","UnzipBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["pusherator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pusherator::demux","","","","","","","","","","","pusherator::filter","","","","","","","","","","","","","","","","","","","","pusherator::filter_map","","","","","","","","","","","","","","","","","","","","pusherator::flatten","","","","","","","","","","","","","","","","","","","","pusherator::for_each","","","","","","","","","","pusherator::inspect","","","","","","","","","","","","","","","","","","","","pusherator::map","","","","","","","","","","","","","","","","","","","","pusherator::partition","","","","","","","","","","","","","","","","","","","","pusherator::pivot","","","","","","","","","","","","","","","","","","","","","pusherator::switch","","","","","","","","","","","","","","","","","","","","pusherator::tee","","","","","","","","","","","","","","","","","","","","pusherator::unzip","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A variadic list of Pusherators.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,27,28,0,28,0,0,1,1,1,0,28,0,28,0,0,0,28,1,27,0,28,1,0,28,1,0,0,29,28,1,0,28,0,28,1,1,1,0,28,0,0,11,11,11,11,11,11,11,11,11,0,0,12,2,12,2,12,2,12,12,2,12,2,2,12,2,12,2,12,2,0,0,13,14,13,14,13,14,13,13,14,13,14,14,13,14,13,14,13,14,0,0,15,16,15,16,15,16,15,15,16,15,16,16,15,16,15,16,15,16,0,17,17,17,17,17,17,17,17,17,0,0,18,3,18,3,18,3,18,18,3,18,3,3,18,3,18,3,18,3,0,0,19,4,19,4,19,4,19,19,4,19,4,4,19,4,19,4,19,4,0,0,20,21,20,21,20,21,20,20,21,20,21,21,20,21,20,21,20,21,0,0,22,5,22,5,22,5,22,5,22,5,5,22,22,22,5,22,5,22,5,0,0,24,6,24,6,24,6,24,24,6,24,6,6,24,6,24,6,24,6,0,0,25,7,25,7,25,7,25,25,7,25,7,7,25,7,25,7,25,7,0,0,26,10,26,10,26,10,26,26,10,26,10,10,26,10,26,10,26,10],"f":[0,0,0,0,0,0,0,[[]],[[]],[[],1],0,[[]],0,[[],2],0,0,0,[[]],[[]],[[]],0,[[],3],[[]],0,[[],4],[[],1],0,0,[[],5],[[]],[1],0,[[],6],0,[[],7],[[],8],[[],8],[[],9],0,[[],10],0,0,[[]],[[]],[[]],[11],[[]],[[],11],[[],8],[[],8],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[12],[[]],[[]],[[],12],[[],2],[2],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[13],[[]],[[]],[[],13],[[],14],[14],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[15],[[]],[[]],[[],15],[[],16],[16],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,[[]],[[]],[[]],[17],[[]],[[],17],[[],8],[[],8],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[],18],[[],3],[3],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[19],[[]],[[]],[[],19],[[],4],[4],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[20],[[]],[[]],[[],20],[[],21],[21],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],5],[5],[22],[22,23],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[24],[[]],[[]],[[],24],[[],6],[6],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[25],[[]],[[]],[[],25],[[],7],[7],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[26],[[]],[[]],[[],26],[[],10],[10],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"p":[[3,"InputBuild"],[3,"FilterBuild"],[3,"InspectBuild"],[3,"MapBuild"],[3,"PivotBuild"],[3,"SwitchBuild"],[3,"TeeBuild"],[4,"Result"],[3,"TypeId"],[3,"UnzipBuild"],[3,"Demux"],[3,"Filter"],[3,"FilterMap"],[3,"FilterMapBuild"],[3,"Flatten"],[3,"FlattenBuild"],[3,"ForEach"],[3,"Inspect"],[3,"Map"],[3,"Partition"],[3,"PartitionBuild"],[3,"Pivot"],[15,"bool"],[3,"Switch"],[3,"Tee"],[3,"Unzip"],[8,"Pusherator"],[8,"PusheratorBuild"],[8,"IteratorToPusherator"]]},\
"relalg":{"doc":"","t":[13,13,4,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Bool","ColRef","Datum","Eq","Int","Literal","Plus","ScalarExpr","String","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","eval","fmt","fmt","from","from","hash","hash","into","into","is_true","span","to_owned","to_owned","to_tokens","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["relalg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[1,2,0,2,1,2,2,0,1,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[[],3],[[],3],[2,1],[[1,4],5],[[2,4],5],[[]],[[]],[1],[2],[[]],[[]],[1,3],[[],6],[[]],[[]],[[2,7]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"p":[[4,"Datum"],[4,"ScalarExpr"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Span"],[3,"TokenStream"],[4,"Result"],[3,"TypeId"]]},\
"variadics":{"doc":"Crate for macro-free variadic tuple metaprogramming.","t":[8,16,8,8,16,8,10,10,10,14,14,14,14],"n":["Extend","Extended","Split","SplitPrefix","Suffix","Variadic","extend","split","split","var_args","var_expr","var_type","variadic_trait"],"q":["variadics","","","","","","","","","","","",""],"d":["","","","","","","","","","Macro for pattern-matching with variadic tuples. This is …","Macro creating a variadic tuple value from a list of …","Macro creating a variadic tuple type from a list of types.","This macro generates a basic variadic trait where each …"],"i":[0,1,0,0,2,0,1,2,3,0,0,0,0],"f":[0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0],"p":[[8,"Extend"],[8,"SplitPrefix"],[8,"Split"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
